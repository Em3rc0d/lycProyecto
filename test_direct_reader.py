from direct_reader import DirectReader
from parsing import Parser
from nfa import NFA

def main():
    print("\nüîπ Conversi√≥n de Expresi√≥n Regular a AFND")
    
    # 1Ô∏è‚É£ Pedir expresi√≥n regular al usuario
    regex = input("‚û°Ô∏è  Ingresa una expresi√≥n regular: ")

    try:
        # 2Ô∏è‚É£ Tokenizar la expresi√≥n regular
        reader = DirectReader(regex)
        tokens = list(reader.CreateTokens())

        print("\n‚úÖ Tokens generados:")
        for token in tokens:
            print(token)

        # 3Ô∏è‚É£ Construir el √°rbol sint√°ctico
        parser = Parser(tokens)
        arbol_sintactico = parser.Parse()

        print("\nüå≥ √Årbol Sint√°ctico generado con √©xito.")

        # 4Ô∏è‚É£ Generar el AFND
        afnd = NFA(arbol_sintactico, reader.GetSymbols(), regex)

        # 5Ô∏è‚É£ Dibujar el AFND
        afnd.WriteNFADiagram()
        print("\n‚úÖ Diagrama del AFND generado con √©xito. Abriendo archivo...")

    except Exception as e:
        print(f"\n‚ùå Error: {e}")

if __name__ == "__main__":
    main()
